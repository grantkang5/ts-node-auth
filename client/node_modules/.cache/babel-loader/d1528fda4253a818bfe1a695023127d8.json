{"ast":null,"code":"import _slicedToArray from \"/usr/app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/usr/app/src/components/Loaders/Loading.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport './loaders.css';\n\nvar Loading = function Loading(_ref) {\n  var delay = _ref.delay;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      ready = _useState2[0],\n      setReady = _useState2[1];\n\n  useEffect(function () {\n    setTimeout(function () {\n      return setReady(true);\n    }, delay);\n  });\n\n  if (ready) {\n    return React.createElement(\"div\", {\n      className: \"loader-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, \"Loading\"), React.createElement(\"span\", {\n      className: \"loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }));\n  }\n\n  return null;\n};\n\nexport default Loading;","map":{"version":3,"sources":["/usr/app/src/components/Loaders/Loading.tsx"],"names":["React","useEffect","useState","Loading","delay","ready","setReady","setTimeout"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAO,eAAP;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAmC;AAAA,MAAhCC,KAAgC,QAAhCA,KAAgC;;AAAA,kBACvBF,QAAQ,CAAC,KAAD,CADe;AAAA;AAAA,MAC1CG,KAD0C;AAAA,MACnCC,QADmC;;AAEjDL,EAAAA,SAAS,CAAC,YAAM;AACdM,IAAAA,UAAU,CAAC;AAAA,aAAMD,QAAQ,CAAC,IAAD,CAAd;AAAA,KAAD,EAAuBF,KAAvB,CAAV;AACD,GAFQ,CAAT;;AAIA,MAAIC,KAAJ,EAAW;AACT,WACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAM,MAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAED,SAAO,IAAP;AACD,CAhBD;;AAkBA,eAAeF,OAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nimport './loaders.css'\n\nconst Loading = ({ delay }: { delay?: number }) => {\n  const [ready, setReady] = useState(false)\n  useEffect(() => {\n    setTimeout(() => setReady(true), delay)\n  })\n\n  if (ready) {\n    return (\n      <div className=\"loader-text\">\n        <span>Loading</span>\n        <span className=\"loading\" />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport default Loading\n"]},"metadata":{},"sourceType":"module"}